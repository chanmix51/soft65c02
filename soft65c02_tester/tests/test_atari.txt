marker $$loading atari binaries$$

// This is a cc65 generated atari binary format file.
// The load address is embed in the binary, so no need to set an address to load it into.
memory load atari "tests/atari.bin"

// load the symbols table
symbols load "tests/symbols.txt"

// define some convenience symbols
symbols add RUNADL=0x02e0
symbols add RUNADH=0x02e1
symbols add INITADL=0x02e2
symbols add INITADH=0x02e3

// hex bytes in file:
// 000000 ff ff 00 20 0b 20 a9 42 8d c6 02 60 a2 00 8e c8
// 000010 02 60 e2 02 e3 02 06 20 e0 02 e1 02 00 20

// first 2 bytes: ff ff              = header
// next  4 bytes: 00 20 0b 20        = load address $2000 and end address of data bytes $200b
//          data: a9 42 8d c6 02 60 a2 00 8e c8 02 60
// next  6 bytes: e2 02 e3 02 06 20  = INIT address (goes into $02e2-$02e3) to run initialisation code after block loaded. address is $2006
// final 6 bytes: e0 02 e1 02 00 20  = RUN address (goes into $02e0-$02e1) to start execution at $2000

// check the file loaded, and into correct memory locations.
// There are 3 segments loaded, DATA, INIT, RUN

// asm code from above:
//        * = $2000
// main:
// 2000   A9 42                LDA #$42
// 2002   8D C6 02             STA $02C6
// 2005   60                   RTS
// init:
// 2006   A2 00                LDX #$00
// 2008   8E C8 02             STX $02C8
// 200B   60                   RTS

// setup initial state of registers
registers flush

// The following illustrate using the testing framework
// but you would not normally check every instruction so closely, but rather
// the results of running a routine, etc.

// test file was loaded into correct locations, using our custom symbols
// 0x02e0: 00 20 06 20
assert $RUNADL=0x00     $$RUNADR = 0x2000 low byte$$
assert $RUNADH=0x20     $$RUNADR = 0x2000 high byte$$
assert $INITADL=0x06    $$INITADR = 0x2006 low byte$$
assert $INITADH=0x20    $$INITADR = 0x2006 high byte$$

assert #0x2000=0xa9     $$first byte of code is LDA (0xa9)$$
assert $main=0xa9       $$symbol main is loaded from table$$

// we can also test byte sequences via address or symbol
assert #0x2000 ~ 0x(a9,42,8d,c6,02)  $$0x2000 starts with correct byte sequence$$
assert $main ~ 0x(a9,42,8d,c6,02)    $$main starts with correct byte sequence$$

// validate the code sets X register and transfers to SP
run #0x2000
assert A=0x42           $$A is $42$$
assert #0x02C6=0x00     $$Target location is 0 before changed$$
run
assert #0x02C6=0x42     $$Changes to value in A$$
run
assert CP=0x0001        $$Exit function$$

registers set X=0xFF
memory write #0x02C8 0x(ff)
run $cust_init
assert X=0x00           $$X is set to 00$$
run
assert #0x02C8=0x00     $$Changes to value in X$$
run
assert CP=0x0001        $$Exit function$$
